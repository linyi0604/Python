单进程服务器：只有一个进程 一次只能服务一个客户端

多线程服务器：
    1 把业务处理部分封装了一个任务函数(数据接收 数据处理 数据发送)
    2 进程里面的socket 当我们启动完子进程 需要关闭
    3 回收子进程资源
单进程非阻塞服务器：
    1 创建套接字
    2 设置地址复用
    3 设置非阻塞
    4 绑定地址和端口
    5 开启监听状态
    6 循环接收新的客户端，并且把新的客户端设置成非阻塞，保存客户端
    7 循环处理客户端列表（对每个客户端 接收数据 处理数据 发送数据）
        如果数据为空 关闭客户端socket，把socket从列表中删除

select服务器：
    1 创建套接字
    2 设置地址复用
    3 绑定端口和ip
    4 监听客户端
    5 初始化全局资源 input output message
    6 外部循环 接收 可读 可写的socket放入列表
        read,write, erro = select.select(input , output , [])
        通过调用 获取可读可写的socket列表
    7 内循环 遍历处理可读列表 可写列表
           7.1 处理可读列表：判断当前socket是不是服务器socket
                如果是服务器：
                    accept 接收到来的客户端
                    保存地址列表，
                    把新的socket放到input里面监控是否有数据到来
                    为每一个socket初始化一个消息队列
           7.2 处理和客户端通讯的套接字（接收消息）
                如果data为空 关闭客户端套接字，从监控可读可写列表中删除 删除消息队列
                处理数据（打印） 消息保存到队列，把socket添加到outpu列表
           7.3 处理可写的事件 等待我们回复数据
                从消息队列获取消息判断是否为空
                    如果有消息 发送给客户端
                如果没有消息 pass
select 跨平台 效率高于非阻塞 低于epoll （轮询机制）   1024
epoll效率高（时间通知机制）   （ linux2.6 以上的内核版本才能支持）

epoll服务器：
    1 创建套接字
    2 设置地址复用
    3 绑定端口和ip
    4 监听
    5 设置全局资源 （ connections链接的客户端 ，addrs客户端地址 ， message消息队列   key是客户端socket的fileno ）
    6 创建epoll 对象
    7 把服务器通过注册的方式添加到epoll 同时注册可读的事件 设置触发模式 ET边缘模式：只触发一次
                                                               LT 如果没有处理 会一直触发
    8 外循环：调用epoll.poll() 获取已经触发的事件，返回一个事件列表 元素是二元组（ 文件描述符， 事件类型 ）
    9 内循环：处理时间列表
        9.1 如果是服务器： fd == server.fileno()
            9.1.1 accept 接收客户端的到来
            9.1.2 保存socket、地址、为socket创建消息队列
            9.1.3 把新添加的socket注册到epoll当中 EPPOLIN|EPPONET
        9.2 如果不是服务器：如果是可读的时间 event == EPOLLIN
            接收消息data
            9.2.1 如果data为空 关闭客户端套接字 删除全局资源 从epoll中注销unregister事件
            9.2.2 data不为空：数据正常到来
                处理数据（打印） 消息保存到消息队列 改变注册modify到可写 EPOLLOUT|EPOLLET
        9.3 处理可写时间 event == EPOLLOUT
            9.3.1 判断消息队列是否为空 改modify为EPOLLIN
            9.3.2 如果消息不为空 先去获取消息 发送消息
        9.4 处理其他事件
            pass