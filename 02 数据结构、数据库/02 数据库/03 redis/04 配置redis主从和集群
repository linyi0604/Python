redis主从搭建：
    1 主服务器的配置文件
        vim /etc/redis/redis.conf
        主机的配置文件中 原本 bind 127.0.0.1
        改成 :
        bind 自己ip

        重启服务器: sudo service redis restart


    2 从服务器的配置文件
        vim /etc/redis/redis.conf
        从机的配置文件中 原本 bind 127.0.0.1
        改成 :
        bind 自己ip
        slaveof 主机IP 端口号    //代表我的主机是谁

        重启服务器: sudo service redis restart

    在这之后 主从就搭建起来了。
        可以在住服务器中进行更新数据库，
            从服务器中只能读取数据。





搭建集群：（最少需要6个服务器）
    横向扩展数据库，使存储量更大，访问压力能够均摊


通过2个主机 配置六个配置文件

1 配置第一个主机:
    在桌面新建一个文件夹redis

    创建节点文件 7000.conf 里面内容：
        port 7000       //绑定一个节点端口 和文件名相同
        bind 192.168.12.107     //主机ip
        daemonize yes
        pidfile 7000.pid
        cluster-enabled yes
        cluster-config-file 7000_node.conf
        cluster-node-timeout 15000
        appendonly yes

    创建节点文件 7001.conf 里面内容：
        port 7001
        bind 192.168.12.107
        daemonize yes
        pidfile 7001.pid
        cluster-enabled yes
        cluster-config-file 7001_node.conf
        cluster-node-timeout 15000
        appendonly yes


    创建节点文件 7002.conf 里面内容：
        port 7002
        bind 192.168.12.107
        daemonize yes
        pidfile 7002.pid
        cluster-enabled yes
        cluster-config-file 7002_node.conf
        cluster-node-timeout 15000
        appendonly yes


    总结：三个文件的配置区别在port、pidfile、cluster-config-file三项

    使用配置文件启动redis服务
    redis-server 7000.conf
    redis-server 7001.conf
    redis-server 7002.conf


2 配置另一个主机:

    ssh 192.168.12.84
    在192.168.12.84上进入Desktop目录，创建redis目录

    在redis目录下创建文件7003.conf，编辑内容如下
    port 7003
    bind 192.168.12.84
    daemonize yes
    pidfile 7003.pid
    cluster-enabled yes
    cluster-config-file 7003_node.conf
    cluster-node-timeout 15000
    appendonly yes

    在redis目录下创建文件7004.conf，编辑内容如下
    port 7004
    bind 192.168.12.84
    daemonize yes
    pidfile 7004.pid
    cluster-enabled yes
    cluster-config-file 7004_node.conf
    cluster-node-timeout 15000
    appendonly yes

    在redis目录下创建文件7005.conf，编辑内容如下
    port 7005
    bind 192.168.12.84
    daemonize yes
    pidfile 7005.pid
    cluster-enabled yes
    cluster-config-file 7005_node.conf
    cluster-node-timeout 15000
    appendonly yes

    总结：三个文件的配置区别在port、pidfile、cluster-config-file三项

    使用配置文件启动redis服务
    redis-server 7003.conf
    redis-server 7004.conf
    redis-server 7005.conf

3 创建集群
    redis的安装包中包含了redis-trib.rb，用于创建集群
    接下来的操作在192.168.12.107机器上进行
    将命令复制，这样可以在任何目录下调用此命令
    sudo cp /usr/share/doc/redis-tools/examples/redis-trib.rb /usr/local/bin/


    安装ruby环境，因为redis-trib.rb是用ruby开发的
    sudo apt-get install ruby

    运行如下命令创建集群
    redis-trib.rb create --replicas 1 192.168.12.107:7000 192.168.12.107:7001  192.168.12.107:7002 192.168.12.84:7003  192.168.12.84:7004  192.168.12.84:7005

    执行上面这个指令在某些机器上可能会报错,主要原因是由于安装的 ruby 不是最新版本
    天朝的防火墙导致无法下载最新版本,所以需要设置 gem 的源
    解决办法如下
    -- 先查看自己的 gem 源是什么地址
    gem source -l   -- 如果是https://rubygems.org/  就需要更换
    -- 更换指令为
    gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/
    -- 通过 gem 安装 redis 的相关依赖
    sudo gem install redis
    -- 然后重新执行指令
    redis-trib.rb create --replicas 1 192.168.12.107:7000 192.168.12.107:7001  192.168.12.107:7002 192.168.12.84:7003  192.168.12.84:7004  192.168.12.84:7005

    数据验证

    登陆：
        redis-cli -h 地址 -c -p 端口号
            选项： -c 代表连接集群
                  -p 端口
                  -h ip地址
    根据上图可以看出，当前搭建的主服务器为7000、7001、7003，对应的从服务器是7004、7005、7002
    在192.168.12.107机器上连接7002，加参数-c表示连接到集群
    redis-cli -h 192.168.12.107 -c -p 7002
    写入数据
    set hello world


    在哪个服务器上写数据：CRC16

    redis cluster在设计的时候，就考虑到了去中心化，去中间件，也就是说，集群中的每个节点都是平等的关系，都是对等的，
    每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，
    这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据
    Redis集群没有并使用传统的一致性哈希来分配数据，而是采用另外一种叫做哈希槽 (hash slot)的方式来分配的。
    redis cluster 默认分配了 16384 个slot，当我们set一个key 时，会用CRC16算法来取模得到所属的slot，
    然后将这个key 分到哈希槽区间的节点上，具体算法就是：CRC16(key) % 16384。
    所以我们在测试的时候看到set 和 get 的时候，直接跳转到了7000端口的节点
    Redis 集群会把数据存在一个 master 节点，然后在这个 master 和其对应的salve 之间进行数据同步。
    当读取数据时，也根据一致性哈希算法到对应的 master 节点获取数据。只有当一个master 挂掉之后，
    才会启动一个对应的 salve 节点，充当 master
    需要注意的是：必须要3个或以上的主节点，否则在创建集群时会失败，并且当存活的主节点数小于总节点数的一半时，整个集群就无法提供服务了